import { CaseStudy, Service, CompanyInfo, CasesData } from '@/types';

// Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞
export async function loadCasesData(): Promise<CaseStudy[]> {
  try {
    const data: CasesData = await import('../data/cases.json');
    return data.cases || [];
  } catch {
    console.warn('Failed to load cases.json, using fallback data');
    return getFallbackCases();
  }
}

export async function loadServicesData(): Promise<Service[]> {
  try {
    const data = await import('../data/services.json') as { default?: { services?: Service[] }, services?: Service[] };
    return (data.default?.services || data.services || []) as Service[];
  } catch {
    console.warn('Failed to load services.json, using fallback data');
    return getFallbackServices();
  }
}

export async function loadCompanyData(): Promise<CompanyInfo> {
  try {
    const data = await import('../data/company.json') as { default?: { company?: CompanyInfo }, company?: CompanyInfo } & CompanyInfo;
    return (data.default?.company || data.company || data) as CompanyInfo;
  } catch {
    console.warn('Failed to load company.json, using fallback data');
    return getFallbackCompany();
  }
}

// Â§áÁî®Êï∞ÊçÆ
function getFallbackCases(): CaseStudy[] {
  return [
    {
      id: 'fallback-1',
      title: 'ÈáëËûçAPPËÆæËÆ°‰ºòÂåñ',
      industry: 'ÈáëËûçÁßëÊäÄ',
      description: '‰∏ì‰∏öÁöÑÈáëËûçAPPÁïåÈù¢ËÆæËÆ°ÂíåÁî®Êà∑‰ΩìÈ™å‰ºòÂåñÊúçÂä°ÔºåÂ∏ÆÂä©ÂÆ¢Êà∑ÊèêÂçáÁî®Êà∑Êª°ÊÑèÂ∫¶Âíå‰∏öÂä°ËΩ¨ÂåñÁéá„ÄÇ',
      image: '/images/cases/jumper1.png',
      featured: true,
      createdAt: '2024-01-01T00:00:00Z'
    }
  ];
}

function getFallbackServices(): Service[] {
  return [
    {
      id: 'fallback-service-1',
      name: 'Á≥ªÁªüËßÑÂàíËÆæËÆ°',
      category: 'Á≥ªÁªüËßÑÂàí',
      description: '‰∏∫‰ºÅ‰∏öÊèê‰æõÂÖ®Êñπ‰ΩçÁöÑÊï∞Â≠óÂåñËß£ÂÜ≥ÊñπÊ°àÔºå‰ªéÁ≥ªÁªüÊû∂ÊûÑÂà∞Áî®Êà∑‰ΩìÈ™åÁöÑÂÆåÊï¥ËßÑÂàí',
      features: ['ÈúÄÊ±ÇÂàÜÊûê', 'Êû∂ÊûÑËÆæËÆ°', 'ÊäÄÊúØÈÄâÂûã', 'ÂÆûÊñΩËßÑÂàí'],
      benefits: ['Èôç‰ΩéÂºÄÂèëÈ£éÈô©', 'ÊèêÂçáÁ≥ªÁªüÊÄßËÉΩ', '‰ºòÂåñÁî®Êà∑‰ΩìÈ™å', 'Á°Æ‰øùÈ°πÁõÆÊàêÂäü'],
      process: [
        {
          step: 1,
          title: 'ÈúÄÊ±ÇË∞ÉÁ†î',
          description: 'Ê∑±ÂÖ•‰∫ÜËß£‰∏öÂä°ÈúÄÊ±ÇÂíåÊäÄÊúØÁé∞Áä∂'
        },
        {
          step: 2,
          title: 'ÊñπÊ°àËÆæËÆ°',
          description: 'Âà∂ÂÆöËØ¶ÁªÜÁöÑÊäÄÊúØÊñπÊ°àÂíåÂÆûÊñΩËÆ°Âàí'
        },
        {
          step: 3,
          title: 'ÂéüÂûãÈ™åËØÅ',
          description: 'ÊûÑÂª∫ÂéüÂûãÈ™åËØÅËÆæËÆ°ÊñπÊ°àÂèØË°åÊÄß'
        }
      ],
      pricing: {
        type: 'ÊåâÈ°πÁõÆÊä•‰ª∑',
        description: 'Ê†πÊçÆÈ°πÁõÆÂ§çÊùÇÂ∫¶ÂíåÂë®ÊúüÂÆöÂà∂Êä•‰ª∑'
      },
      icon: 'üí°',
      featured: true
    }
  ];
}

function getFallbackCompany(): CompanyInfo {
  return {
    name: 'È¶ôÊ∏ØÈÄüÁùøÊ£ÆËßÜÁßëÊäÄÊúâÈôêÂÖ¨Âè∏',
    englishName: 'Susense Technology Co., Limited',
    tagline: 'ËÆæËÆ°È©±Âä®ÔºåÁßëÊäÄËµãËÉΩ',
    description: 'Ëá™2019Âπ¥ÊàêÁ´ã‰ª•Êù•Ôºå‰∏ìÊ≥®‰∫é‰∏∫‰∏≠Â∞è‰ºÅ‰∏öÂíåÂ§ßÂûãÈáëËûçÂÆ¢Êà∑Êèê‰æõ‰∏ì‰∏öÁöÑÊï∞Â≠óÂåñËΩ¨ÂûãÊúçÂä°„ÄÇ',
    founded: '2019',
    teamSize: {
      core: 10,
      partners: 10
    },
    address: {
      chinese: 'È¶ôÊ∏ØÊ≤πÂ∞ñÊó∫Âå∫Â§ßËßíÂíÄÈÄöÂ∑ûË°óÈõ≤‰πãÁ´Ø1011ÂÆ§',
      english: 'Room 1011, Cloud One, Tung Chau Street, Tai Kok Tsui, Yau Tsim Mong, Hong Kong'
    },
    contact: {
      email: 'zhanglixun@susense.cn',
      website: 'susense.hk'
    },
    services: ['Á≥ªÁªüËßÑÂàíËÆæËÆ°', 'UI/UXËÆæËÆ°', '‰∫ßÂìÅËßÑÂàíÂí®ËØ¢', 'ËøêËê•Ê¥ªÂä®Á≠ñÂàí'],
    values: ['Áî®Êà∑‰ΩìÈ™å‰ºòÂÖà', 'ÂÆ¢Êà∑ÊúçÂä°‰ºòÂÖà', 'ÊåÅÁª≠ÂàõÊñ∞', '‰∏ì‰∏öÂèØÈù†']
  };
}

// Êï∞ÊçÆÈ™åËØÅÂáΩÊï∞
export function validateCaseData(cases: unknown[]): CaseStudy[] {
  return cases.filter((caseItem) => {
    const item = caseItem as Record<string, unknown>;
    const isValid = item.id && item.title && item.industry;
    if (!isValid) {
      console.warn('Invalid case data:', caseItem);
    }
    return isValid;
  }) as CaseStudy[];
}

export function validateServiceData(services: unknown[]): Service[] {
  return services.filter((service) => {
    const item = service as Record<string, unknown>;
    const isValid = item.id && item.name && item.category;
    if (!isValid) {
      console.warn('Invalid service data:', service);
    }
    return isValid;
  }) as Service[];
}